"""
Django settings for social1 project.

Generated by 'django-admin startproject' using Django 3.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import pymysql
import environ

# Initialize environment variables
env = environ.Env(
    # Set casting and default values
    DEBUG=(bool, False),
    EMAIL_USE_TLS=(bool, True),
    EMAIL_PORT=(int, 587),
)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Configure pymysql as MySQL driver
pymysql.install_as_MySQLdb()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY', default='xgmia2j!q1f+=77*yjc6^axs82dz@kb7c)z%__igt@k0#-b+*&')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = [
    "localhost",  
    "127.0.0.1", 
    "192.168.0.27",
    "frizerskisalonhasko.com",
    "www.frizerskisalonhasko.com",
    "*.ngrok-free.app",  # Allow all ngrok domains for development
    "*.ngrok.io",        # Legacy ngrok domains for development
    "testserver",        # For testing
    "evoluci4n.online",
    "www.evoluci4n.online"
]
CSRF_TRUSTED_ORIGINS = [
    "https://frizerskisalonhasko.com",
    "https://www.frizerskisalonhasko.com",
    "https://evoluci4n.online",
    "https://www.evoluci4n.online",
    # Development and testing URLs
    "https://cd88-89-216-152-130.ngrok-free.app",
    "https://c624-89-216-152-130.ngrok-free.app",
    'https://a7df-178-149-237-173.eu.ngrok.io',
    'http://localhost:8000',
    'http://127.0.0.1:8000'
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'
# Application definition

# Use localhost for development, production site for deployed environment
SITE_ID = 8 #8 for MySQL, was 5 for SQLite

# Site URL for ngrok/development (set this when using ngrok)
# Example: SITE_URL = 'https://abc123.ngrok-free.app'
SITE_URL = os.environ.get('SITE_URL', None)

INSTALLED_APPS = [
    'appointment',
    'crispy_forms',
    'galerija',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'django_extensions',

]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'SCOPE': ['email', 'public_profile'],  # Add desired permissions here
        'METHOD': 'oauth2',
        'VERIFIED_EMAIL': True,
        'VERSION': 'v12.0',  # Use the latest version of the Facebook Graph API
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'social1.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS':  [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'appointment.context_processors.notification_count',
                    'appointment.context_processors.active_banners',
            ],
        },
    },
]

WSGI_APPLICATION = 'social1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# Database configuration - can be switched with environment variable
if os.environ.get('USE_SQLITE') == '1':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env('DB_NAME', default='barbershop'),
            'USER': env('DB_USER', default='barberuser'),
            'PASSWORD': env('DB_PASSWORD', default='barberpass123'),
            'HOST': env('DB_HOST', default='localhost'),
            'PORT': env('DB_PORT', default='3306'),
            'OPTIONS': {
                'charset': 'utf8mb4',
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            },
        }
    }

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'appointment.Korisnik'

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
LOGIN_URL = '/user_login/'

SOCIALACCOUNT_LOGIN_ON_GET=True
LOGIN_REDIRECT_URL = '/'

ACCOUNT_FORMS = {
    'signup': 'yourapp.forms.CustomSignupForm',
}


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

STATICFILES_ROOT = (
    os.path.join(BASE_DIR, 'static'),
)

DEFAULT_AUTO_FIELD='django.db.models.AutoField'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Firebase Configuration
# Firebase Server-side Configuration (for admin SDK)
FIREBASE_CONFIG = {
    'type': env('FIREBASE_TYPE', default='service_account'),
    'project_id': env('FIREBASE_PROJECT_ID', default='push-notify-4ffd3'),
    'private_key_id': env('FIREBASE_PRIVATE_KEY_ID', default=''),
    'private_key': env('FIREBASE_PRIVATE_KEY', default='').replace('\\n', '\n'),
    'client_email': env('FIREBASE_CLIENT_EMAIL', default=''),
    'client_id': env('FIREBASE_CLIENT_ID', default=''),
    'auth_uri': env('FIREBASE_AUTH_URI', default='https://accounts.google.com/o/oauth2/auth'),
    'token_uri': env('FIREBASE_TOKEN_URI', default='https://oauth2.googleapis.com/token'),
    'auth_provider_x509_cert_url': env('FIREBASE_AUTH_PROVIDER_CERT_URL', default=''),
    'client_x509_cert_url': env('FIREBASE_CLIENT_CERT_URL', default=''),
    'universe_domain': env('FIREBASE_UNIVERSE_DOMAIN', default='googleapis.com')
}

# Firebase Client-side Configuration (for web SDK)
FIREBASE_WEB_CONFIG = {
    'apiKey': env('FIREBASE_WEB_API_KEY', default=''),
    'authDomain': env('FIREBASE_AUTH_DOMAIN', default=''),
    'projectId': env('FIREBASE_PROJECT_ID', default='push-notify-4ffd3'),
    'storageBucket': env('FIREBASE_STORAGE_BUCKET', default=''),
    'messagingSenderId': env('FIREBASE_MESSAGING_SENDER_ID', default=''),
    'appId': env('FIREBASE_APP_ID', default=''),
    'measurementId': env('FIREBASE_MEASUREMENT_ID', default='')
}

FIREBASE_VAPID_KEY = env('FIREBASE_VAPID_KEY', default='')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'push_notifications.log'),
        },
    },
    'loggers': {
        'appointment.models': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'appointment.push_notifications': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'appointment.fcm_views': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'appointment.email': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
